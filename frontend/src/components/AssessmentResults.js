import React, { useState } from 'react';

// PDF generation function
const generatePDF = (assessment) => {
  const htmlContent = `
<!DOCTYPE html>
<html>
<head>
    <title>Exempt Development Assessment Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }
        .header { text-align: center; border-bottom: 2px solid #333; padding-bottom: 10px; margin-bottom: 20px; }
        .section { margin-bottom: 20px; }
        .result-approved { color: #16a34a; font-weight: bold; }
        .result-conditional { color: #ca8a04; font-weight: bold; }
        .result-rejected { color: #dc2626; font-weight: bold; }
        .disclaimer { background: #fef2f2; border: 1px solid #fecaca; padding: 15px; border-radius: 5px; }
        ul { padding-left: 20px; }
        .legislation { border: 1px solid #e5e7eb; padding: 10px; margin: 10px 0; border-radius: 5px; }
    </style>
</head>
<body>
    <div class="header">
        <h1>EXEMPT DEVELOPMENT ASSESSMENT REPORT</h1>
        <p>Assessment Date: ${new Date().toLocaleDateString()}</p>
        <p>Generated by Backyard Bud - Albury Planning Assessment Tool</p>
    </div>
    
    <div class="section">
        <h2>Assessment Result</h2>
        <p class="${
          assessment.result.includes('APPROVED') ? 'result-approved' :
          assessment.result.includes('CONDITIONAL') ? 'result-conditional' :
          'result-rejected'
        }">
            ${assessment.result}
        </p>
        <p>${assessment.message || 'Assessment completed'}</p>
    </div>
    
    ${assessment.issues && assessment.issues.length > 0 ? `
    <div class="section">
        <h2>Issues Identified</h2>
        <ul>
            ${assessment.issues.map(issue => `<li>${issue}</li>`).join('')}
        </ul>
    </div>
    ` : ''}
    
    ${assessment.conditions && assessment.conditions.length > 0 ? `
    <div class="section">
        <h2>Conditions</h2>
        <ul>
            ${assessment.conditions.map(condition => `<li>${condition}</li>`).join('')}
        </ul>
    </div>
    ` : ''}
    
    ${assessment.summary ? `
    <div class="section">
        <h2>Assessment Summary</h2>
        <p>Requirements Checked: ${assessment.summary.totalChecked}</p>
        <p>Complies: ${assessment.summary.complies}</p>
        <p>Fails: ${assessment.summary.fails}</p>
        <p>Conditional: ${assessment.summary.conditional}</p>
    </div>
    ` : ''}
    
    ${assessment.legislationApplied ? `
    <div class="section">
        <h2>Legislation Compliance</h2>
        ${assessment.legislationApplied.map(law => `
        <div class="legislation">
            <h4>${law.clause}: ${law.status}</h4>
            <p><strong>Requirement:</strong> ${law.plain}</p>
            <p><strong>Legislative Text:</strong> "${law.text}"</p>
            ${law.userValue ? `<p><strong>Your Structure:</strong> ${law.userValue}</p>` : ''}
        </div>
        `).join('')}
    </div>
    ` : ''}
    
    <div class="section disclaimer">
        <h2>Important Disclaimers</h2>
        <ul>
            <li>This is NOT a formal approval or Development Consent</li>
            <li>You must verify the property is NOT in a foreshore area</li>
            <li>Building Code of Australia compliance is required</li>
            <li>This assessment is based on information provided and may not account for all site-specific conditions</li>
            <li>Always consult with your local council before commencing work</li>
        </ul>
    </div>
    
    <div class="section">
        <h2>Next Steps</h2>
        <ul>
            <li>Contact Albury City Council to confirm this assessment</li>
            <li>Have a licensed surveyor verify all measurements</li>
            <li>Check if your property has any heritage or environmental overlays</li>
            <li>Ensure compliance with building codes during construction</li>
            <li>Consider consulting with a building professional</li>
        </ul>
    </div>
    
    <div style="text-align: center; margin-top: 30px; border-top: 1px solid #ccc; padding-top: 10px;">
        <p>&copy; 2025 Backyard Bud. Your friendly planning assessment companion.</p>
    </div>
</body>
</html>
  `;
  
  // Create a new window and print
  const printWindow = window.open('', '_blank');
  printWindow.document.write(htmlContent);
  printWindow.document.close();
  printWindow.focus();
  
  // Wait for content to load then print
  setTimeout(() => {
    printWindow.print();
    printWindow.close();
  }, 500);
};

const AssessmentResults = ({ assessment, onNewAssessment }) => {
  const [showDetails, setShowDetails] = useState(false);

  if (!assessment) return null;

  const getResultIcon = (result) => {
    if (result.includes('✅') || result.includes('APPROVED')) return '✅';
    if (result.includes('❌') || result.includes('REJECTED')) return '❌';
    if (result.includes('⚠️') || result.includes('CONDITIONAL')) return '⚠️';
    return '❓';
  };

  const getResultColor = (result) => {
    if (result.includes('✅') || result.includes('APPROVED')) return 'text-green-600';
    if (result.includes('❌') || result.includes('REJECTED')) return 'text-red-600';
    if (result.includes('⚠️') || result.includes('CONDITIONAL')) return 'text-yellow-600';
    return 'text-gray-600';
  };

  const getResultMessage = (result) => {
    if (result.includes('APPROVED')) {
      return 'Likely Approved (Exempt Development) - Your structure appears to meet all exempt development criteria. Please ensure your actual structure complies with all the criteria you\'ve confirmed. You may still need to notify council before starting work.';
    }
    if (result.includes('REJECTED')) {
      return 'Development Approval Required - Your structure does not qualify as exempt development. You\'ll need to apply for development approval from council.';
    }
    if (result.includes('CONDITIONAL')) {
      return 'Conditional Approval - Your structure meets most requirements but has specific conditions. Review the detailed checks to see what adjustments may be needed.';
    }
    return 'Assessment completed - see details below.';
  };

  const renderLegislationDetail = (legislation) => {
    const getStatusIcon = (status) => {
      if (status.includes('✓')) return '✓';
      if (status.includes('❌')) return '❌';
      if (status.includes('⚠️')) return '⚠️';
      return '?';
    };

    const getStatusColor = (status) => {
      if (status.includes('✓')) return 'text-green-600';
      if (status.includes('❌')) return 'text-red-600';
      if (status.includes('⚠️')) return 'text-yellow-600';
      return 'text-gray-600';
    };

    return (
      <div key={legislation.clause} className="border-b border-gray-200 pb-4 mb-4 last:border-b-0">
        <div className="flex items-center mb-2">
          <span className={`mr-2 font-bold ${getStatusColor(legislation.status)}`}>
            {getStatusIcon(legislation.status)}
          </span>
          <h4 className="font-medium">
            {legislation.clause} - {legislation.plain?.split(' - ')[0] || 'Requirement'}
          </h4>
        </div>
        
        <div className="ml-6 space-y-2">
          <div>
            <p className="text-sm font-medium text-gray-700">Legislative Text:</p>
            <p className="text-sm text-gray-600 italic bg-gray-50 p-2 rounded">
              "{legislation.text}"
            </p>
          </div>
          
          <div>
            <p className="text-sm font-medium text-gray-700">Plain English:</p>
            <p className="text-sm text-gray-600">
              {legislation.plain}
            </p>
          </div>
          
          {legislation.userValue && (
            <div>
              <p className="text-sm font-medium text-gray-700">Your Structure:</p>
              <p className="text-sm text-gray-600">
                {legislation.userValue} {legislation.limit && `(limit: ${legislation.limit})`}
              </p>
            </div>
          )}
          
          <div>
            <p className="text-sm font-medium text-gray-700">Status:</p>
            <p className={`text-sm font-medium ${getStatusColor(legislation.status)}`}>
              {legislation.status}
            </p>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="bg-white p-6 rounded-lg border">
      {/* Property Details Section - Moved to Top */}
      {assessment.input && (
        <div className="bg-gray-50 p-4 rounded-lg mb-6">
          <h3 className="font-semibold text-lg mb-3">Property & Structure Details</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h4 className="font-medium text-gray-900 mb-2">Property Information</h4>
              <ul className="text-sm text-gray-600 space-y-1">
                {assessment.input.property?.address && (
                  <li><span className="font-medium">Address:</span> {assessment.input.property.address}</li>
                )}
                {assessment.input.property?.type && (
                  <li><span className="font-medium">Type:</span> {assessment.input.property.type.charAt(0).toUpperCase() + assessment.input.property.type.slice(1)}</li>
                )}
                {assessment.input.property?.lotSize && (
                  <li><span className="font-medium">Lot Size:</span> {assessment.input.property.lotSize.toLocaleString()} m²</li>
                )}
                {assessment.input.property?.zoning && (
                  <li><span className="font-medium">Zoning:</span> {assessment.input.property.zoning}</li>
                )}
              </ul>
            </div>
            <div>
              <h4 className="font-medium text-gray-900 mb-2">Proposed Structure</h4>
              <ul className="text-sm text-gray-600 space-y-1">
                {assessment.input.proposal?.structureType && (
                  <li><span className="font-medium">Type:</span> {assessment.input.proposal.structureType.charAt(0).toUpperCase() + assessment.input.proposal.structureType.slice(1)}</li>
                )}
                {assessment.input.proposal?.height && (
                  <li><span className="font-medium">Height:</span> {assessment.input.proposal.height}m</li>
                )}
                {assessment.input.proposal?.floorArea && (
                  <li><span className="font-medium">Floor Area:</span> {assessment.input.proposal.floorArea}m²</li>
                )}
                {assessment.input.proposal?.distanceFromBoundary && (
                  <li><span className="font-medium">Boundary Setback:</span> {assessment.input.proposal.distanceFromBoundary}m</li>
                )}
              </ul>
            </div>
          </div>
        </div>
      )}

      <div className="text-center mb-6">
        <div className="text-4xl mb-2">{getResultIcon(assessment.result)}</div>
        <h2 className={`text-2xl font-bold mb-2 ${getResultColor(assessment.result)}`}>
          {assessment.result.includes('APPROVED') ? 'APPROVED' : 
           assessment.result.includes('REJECTED') ? 'Non Exempt' : 
           assessment.result.includes('CONDITIONAL') ? '⚠️ Likely Exempt' : 
           assessment.result}
        </h2>
        <p className="text-gray-600">
          {getResultMessage(assessment.result)}
        </p>
      </div>

      {assessment.summary && (
        <div className="bg-gray-50 p-4 rounded-lg mb-6">
          <h3 className="font-medium mb-2">Assessment Summary</h3>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
            <div>
              <span className="font-medium">Requirements Checked:</span>
              <div className="text-lg font-bold">{assessment.summary.totalChecked}</div>
            </div>
            <div>
              <span className="font-medium text-green-600">✅ Complies:</span>
              <div className="text-lg font-bold text-green-600">{assessment.summary.complies}</div>
            </div>
            <div>
              <span className="font-medium text-red-600">❌ Fails:</span>
              <div className="text-lg font-bold text-red-600">{assessment.summary.fails}</div>
            </div>
            <div>
              <span className="font-medium text-yellow-600">⚠️ Conditional:</span>
              <div className="text-lg font-bold text-yellow-600">{assessment.summary.conditional}</div>
            </div>
          </div>
        </div>
      )}

      {assessment.issues && assessment.issues.length > 0 && (
        <div className="bg-blue-50 border border-blue-200 p-4 rounded-lg mb-4">
          <h4 className="font-medium text-blue-800 mb-2">📋 Requirements for DA Approval:</h4>
          <ul className="text-sm text-blue-700 space-y-1">
            {assessment.issues.map((issue, index) => (
              <li key={index}>• {issue}</li>
            ))}
          </ul>
          <div className="mt-3 p-3 bg-blue-100 rounded">
            <p className="text-sm text-blue-800 font-medium">💡 You will need to submit a Development Application to council for approval.</p>
          </div>
        </div>
      )}

      {assessment.conditions && assessment.conditions.length > 0 && (
        <div className="bg-yellow-50 border border-yellow-200 p-4 rounded-lg mb-4">
          <h4 className="font-medium text-yellow-800 mb-2">Mandatory Conditions:</h4>
          <ul className="text-sm text-yellow-700 space-y-1">
            {assessment.conditions.map((condition, index) => (
              <li key={index}>• {condition}</li>
            ))}
          </ul>
        </div>
      )}

      <div className="mb-6">
        <button
          onClick={() => setShowDetails(!showDetails)}
          className="flex items-center justify-between w-full p-3 bg-gray-100 hover:bg-gray-200 rounded-lg"
        >
          <span className="font-medium">View Details</span>
          <span className="text-xl">{showDetails ? '▲' : '▼'}</span>
        </button>
      </div>

      {showDetails && (
        <div className="mb-6">
          <h3 className="font-bold text-lg mb-4">DETAILED ASSESSMENT:</h3>
          
          {assessment.legislationApplied && assessment.legislationApplied.length > 0 ? (
            <div className="space-y-4">
              <h4 className="font-semibold text-md mb-3">Legislation Checked:</h4>
              {assessment.legislationApplied.map((legislation) => 
                renderLegislationDetail(legislation)
              )}
            </div>
          ) : (
            <div className="bg-gray-50 p-4 rounded-lg">
              <h4 className="font-semibold text-md mb-2">Assessment Details:</h4>
              <p className="text-gray-600 mb-2">Your structure was assessed against NSW SEPP (Exempt & Complying Development Codes) 2008 requirements.</p>
              
              {assessment.issues && assessment.issues.length > 0 && (
                <div className="mt-4">
                  <h5 className="font-medium text-gray-800 mb-2">Issues Identified:</h5>
                  <ul className="list-disc list-inside space-y-1 text-gray-700">
                    {assessment.issues.map((issue, index) => (
                      <li key={index}>{issue}</li>
                    ))}
                  </ul>
                </div>
              )}
              
              {assessment.conditions && assessment.conditions.length > 0 && (
                <div className="mt-4">
                  <h5 className="font-medium text-gray-800 mb-2">Conditions:</h5>
                  <ul className="list-disc list-inside space-y-1 text-gray-700">
                    {assessment.conditions.map((condition, index) => (
                      <li key={index}>{condition}</li>
                    ))}
                  </ul>
                </div>
              )}
              
              <div className="mt-4 p-3 bg-blue-50 rounded">
                <p className="text-sm text-blue-800">
                  <strong>Key Requirements Checked:</strong> Structure size limits, height restrictions, boundary setbacks, 
                  stormwater management, building compliance, and overlay restrictions.
                </p>
              </div>
            </div>
          )}
        </div>
      )}

      <div className="bg-red-50 border border-red-200 p-4 rounded-lg mb-6">
        <h4 className="font-medium text-red-800 mb-2">⚠️ IMPORTANT DISCLAIMERS:</h4>
        <ul className="text-sm text-red-700 space-y-1">
          <li>• This is NOT a formal approval or Development Consent</li>
          <li>• You must verify the property is NOT in a foreshore area</li>
          <li>• Building Code of Australia compliance is required</li>
          <li>• This assessment is based on information provided and may not account for all site-specific conditions</li>
          <li>• Always consult with your local council before commencing work</li>
        </ul>
      </div>

      <div className="bg-green-50 border border-green-200 p-4 rounded-lg mb-6">
        <h4 className="font-medium text-green-800 mb-2">📋 Next Steps:</h4>
        <ul className="text-sm text-green-700 space-y-1">
          <li>• 📞 Contact Albury City Council to confirm this assessment</li>
          <li>• 📏 Have a licensed surveyor verify all measurements</li>
          <li>• 🏛️ Check if your property has any heritage or environmental overlays</li>
          <li>• 🔍 Ensure compliance with building codes during construction</li>
          <li>• 💼 Consider consulting with a building professional</li>
        </ul>
        <div className="mt-3 p-3 bg-green-100 rounded">
          <p className="text-sm text-green-800">💡 <strong>Remember:</strong> This tool provides guidance only. Always verify with council before starting construction.</p>
        </div>
      </div>

      <div className="flex space-x-4">
        <button
          onClick={onNewAssessment}
          className="flex-1 bg-blue-600 text-white py-3 px-6 rounded-lg hover:bg-blue-700"
        >
          New Assessment
        </button>
        <button
          onClick={() => generatePDF(assessment)}
          className="px-6 py-3 border border-gray-300 rounded-lg hover:bg-gray-50"
        >
          Generate PDF Report
        </button>
      </div>
    </div>
  );
};

export default AssessmentResults;